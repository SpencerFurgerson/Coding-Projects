{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='top'></a>\n",
    "\n",
    "# CSCI 3022: Intro to Data Science - Spring 2021 Practicum 1\n",
    "***\n",
    "\n",
    "This practicum is due on Canvas by **11:59 PM on Friday March 19*. Your solutions to theoretical questions should be done in Markdown/MathJax directly below the associated question.  Your solutions to computational questions should include any specified Python code and results as well as written commentary on your conclusions.  \n",
    "\n",
    "\n",
    "Note: There are a number of images in this problem.  If you can't get them to display properly, they are hosted [here](https://drive.google.com/drive/folders/1M4kBMd23roiDVnfbYQmPmzsR1bPZAxzX?usp=sharing).  \n",
    "\n",
    "**Here are the rules:** \n",
    "\n",
    "1. All work, code and analysis, must be your own. \n",
    "2. You may use your course notes, posted lecture slides, textbooks, in-class notebooks, and homework solutions as resources.  You may also search online for answers to general knowledge questions like the form of a probability distribution function or how to perform a particular operation in Python/Pandas. \n",
    "3. This is meant to be like a coding portion of your midterm exam. So, the instructional team will be a bit less helpful than we typically are with homework. For example, we will not check answers, significantly debug your code, and so on.  But please don't feel like you're totally alone on this: feel free to ask questions or ask for help, and we will decide how best to provide that assistance.\n",
    "4. If something is left open-ended, it is because we want to see how you approach the kinds of problems you will encounter in the wild, where it will not always be clear what sort of tests/methods should be applied. Feel free to ask clarifying questions though.\n",
    "5. You may **NOT** post to message boards or other online resources asking for help.\n",
    "6. You may **NOT** copy-paste solutions *from anywhere*.\n",
    "7. You may **NOT** collaborate with classmates or anyone else.\n",
    "8. In short, **your work must be your own**. It really is that simple.\n",
    "\n",
    "Violation of the above rules will result in an immediate academic sanction (*at the very least*, you will receive a 0 on this practicum or an F in the course, depending on severity), and a trip to the Honor Code Council.\n",
    "\n",
    "**By submitting this assignment, you agree to abide by the rules given above.**\n",
    "\n",
    "***\n",
    "\n",
    "**NOTES**: \n",
    "\n",
    "- You may not use late days on the practicums nor can you drop your practicum grades. \n",
    "- If you have a question for us, post it as a **PRIVATE** message on Piazza.  If we decide that the question is appropriate for the entire class, then we will add it to a Practicum clarifications thread. (NB: you should use public posts for the epidemiology \"warmup\" prompts).\n",
    "- Do **NOT** load or use any Python packages that are not available in Anaconda 3.6. The practicum is designed to be completed using only the packages in the first given code cell.\n",
    "- Some problems with code may be autograded.  If we provide a function API **do not** change it.  If we do not provide a function API then you're free to structure your code however you like. \n",
    "- Submit only this Jupyter notebook to Canvas.  Do not compress it using tar, rar, zip, etc. \n",
    "- This should go without saying, but... For any question that asks you to calculate something, you **must show all work to receive credit**. Sparse or nonexistent work will receive sparse or nonexistent credit.\n",
    "\n",
    "---\n",
    "**Shortcuts:**  [Problem 1](#p1) | [Problem 2](#p2) | [Bottom](#bot)\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats\n",
    "from scipy.stats import poisson\n",
    "import numpy as np \n",
    "import pandas as pd\n",
    "import math\n",
    "import random\n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "---\n",
    "[Back to top](#top)\n",
    "<a id='p1'></a>\n",
    "\n",
    "## [40 points] Problem 1: Simulated Forest Cover"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In Boulder, Colorado people *love* trees.  So do we in CSCI3022!  So we're going to play around with a function that can be used to simulate, describe, and model tree cover.\n",
    "\n",
    "Recall that a **Poisson** distribution is meant to count the number of events per unit time.  It turns out, the Poisson function is able to count over more versatile spaces than just time.  It can also track points over space, area, or more abstract regions.  This means that a Poisson process is a powerful way to create descriptions of *random points*.  In our prior class exercises using random points (estimating $\\pi$ in nb04, stochastic integration in HW4) we simulated points *uniformly* in space and generated conclusions accordingly.  For something like tree cover, locations of trees are **not** independent and identically distributed: some areas are much denser than others!  This holds for many other processes describing random points: locations of defects in a manufacturing materials, locations of stars in the night sky, distribution of raisins in Zach's bag of granola, etc. \n",
    "\n",
    "\n",
    "To simulate from a **Poisson process**, we first determine the intensity $\\Lambda$ (capital $\\lambda$) at which events are occuring.  This rate can be in count-per-time, count-per-area, etc.  Since we're going to simulate tree cover, $\\Lambda$ will be measured in $\\frac{trees}{area}$.  Suppose our \"area\" is measured in acres.\n",
    "\n",
    "### To simulate from a Poisson point process with intensity/rate $\\Lambda$:\n",
    "\n",
    "- determine the size $|A|$ of the area $A$ you wish to populate with points (trees)\n",
    "- simulate $X$, a Poisson random variable with rate $\\lambda = \\Lambda |A|$.  This represents a count of the number of trees in area $A$.\n",
    "- simulate $X$ independent and identically distributed continuous uniform random variables inside the area $A$ (these are random locations/points as we've used previously; in 2-D each will contain both a random-x coordinate *and* a random-y coordinate)\n",
    "- Implementation note: If the boundary of a region $A$ is determined by a function, you can ensure that the points are continuous uniform *within* that region by simulating uniform points in a box or rectangle *covering* $A$ and discarding any points that aren't inside the boundaries of $A$, replacing with new random draws until you've reached $X$ total.\n",
    "- ... and that's it!  But now we can glue together regions of varying intensities $\\Lambda$ to represent different biomes, even down to \"trees along the irrigation ditch\" varying in intensity from \"trees in the green belt\" or \"trees in that ugly housing complex.\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Part A **: Getting started\n",
    "\n",
    "First, simulate two sets of points from the unit square $[0,1] \\times [0,1]$.\n",
    "- set one should be from a Poisson point process with intensity 150.  You should *expect* around how many trees?\n",
    "- set two should be from a Poisson point process with intensity 75.  You should *expect* around how many trees?\n",
    "\n",
    "Plot the two sets in a figure side-by-side (one row, two columns) to verify that your code is working.  Make the points green, since they're trees."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Intensity = 75')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#code for A\n",
    "fig, ax = plt.subplots(2, figsize=(5, 8))\n",
    "\n",
    "\n",
    "numbPoints = stats.poisson(150).rvs()#Poisson number of points\n",
    "xx = stats.uniform.rvs(0,1,((numbPoints,1)))#x coordinates of Poisson points\n",
    "yy = stats.uniform.rvs(0,1,((numbPoints,1)))#y coordinates of Poisson points\n",
    "#Plotting\n",
    "ax[0].scatter(xx,yy, edgecolor='g', facecolor='none', alpha=0.5 )\n",
    "\n",
    "plt.xlabel(\"X axis label\")\n",
    "plt.ylabel(\"Y axis label\")\n",
    "\n",
    "\n",
    "numbPoints2 = stats.poisson(75).rvs()#Poisson number of points\n",
    "xx2 = stats.uniform.rvs(0,1,((numbPoints2,1)))#x coordinates of Poisson points\n",
    "yy2 = stats.uniform.rvs(0,1,((numbPoints2,1)))#y coordinates of Poisson points\n",
    "#Plotting\n",
    "ax[1].scatter(xx2,yy2, edgecolor='g', facecolor='none', alpha=0.5 )\n",
    "\n",
    "#label axes and title with intensity\n",
    "\n",
    "ax[0].set_xlabel(\"Acres\", \n",
    "               fontweight ='bold')\n",
    "ax[0].set_ylabel(\"Intensity = 150\", \n",
    "               fontweight ='bold')\n",
    "\n",
    "ax[1].set_xlabel(\"Acres\", \n",
    "               fontweight ='bold')\n",
    "ax[1].set_ylabel(\"Intensity = 75\", \n",
    "               fontweight ='bold')\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Part B **: Distance-between-trees\n",
    "\n",
    "Take the set of points from the intensity $150$ figure in part $A$ and compute the minimum distance between *any* two points in the data set (hint: likely a loop or double-loop).  Use the standard Euclidean/Pythagorean distance, where for points $(x_1, y_1)$ and $(x_2, y_2)$ the distance between them is $$d=\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$$\n",
    "\n",
    "Print that distance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The minimum distance is 0.004 or 0.8256 feet\n"
     ]
    }
   ],
   "source": [
    "# code for B\n",
    "mindist = 1000000000000\n",
    "for i in range (len(xx)):\n",
    "    for j in range (1,len(xx)):\n",
    "\n",
    "        newdist = math.sqrt(((xx[i] - xx[j])**2) + ((yy[i] - yy[j])**2))\n",
    "\n",
    "        if newdist < mindist:\n",
    "            if newdist > 0.0:\n",
    "                mindist = newdist\n",
    "\n",
    "            \n",
    "print (\"The minimum distance is \" + str(round(mindist,4)) + \" or \" + str(round(mindist*208.71,4)) + \" feet\")\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Part C **: Distance-between-trees, fixed\n",
    "\n",
    "It turns out our intensity values of 150-200 trees per acre (an acre is $208.71 \\times 208.71$ feet) is pretty reasonable for a mature woodland.  So our original intensity values were *per acre*.  If you take your minimum linear-acre-distance and multiply it by 208.71, it should be now be feet between trees.  The result of this is that it is quite likely that some of our trees will be awkwardly close together.  Let's fix that!\n",
    "\n",
    "Take the data set from $$\\Lambda=150$$ and **thin** it by *removing* one (either) of the two points from the pair of closest points you found in part **B**.  Repeat until all your trees are at least 1.5 feet apart.\n",
    "\n",
    "Print how many trees were removed, and create another scatter plot of the resulting locations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 trees removed\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'With Thinned Trees')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# code for C\n",
    "removed = []\n",
    "\n",
    "for i in range (len(xx)):\n",
    "    for j in range (1,len(xx)):\n",
    "        if i == j:\n",
    "            continue\n",
    "        newdist = math.sqrt(((xx[i] - xx[j])**2) + ((yy[i] - yy[j])**2))\n",
    "        newdist = newdist * 208.71\n",
    "\n",
    "        \n",
    "        if newdist < 1.5:\n",
    "\n",
    "            alreadyRemoved = False\n",
    "            for f in range (len(removed)):\n",
    "                if removed[f] == i:\n",
    "                    alreadyRemoved = True\n",
    "                \n",
    "            if alreadyRemoved == True:\n",
    "                continue\n",
    "                \n",
    "            removed.append(j)\n",
    "            \n",
    "\n",
    "newxx = np.delete(xx,removed)\n",
    "newyy = np.delete(yy,removed)\n",
    "\n",
    "\n",
    "print (str(len(removed))+\" trees removed\")\n",
    "        \n",
    "\n",
    "    \n",
    "            \n",
    "plt.scatter(newxx, newyy, edgecolor='g', facecolor='none', alpha=0.5 );\n",
    "\n",
    "\n",
    "plt.xlabel(\"Acres\")\n",
    "plt.ylabel(\"With Thinned Trees\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Part D **: Make a pretty picture!  If our goal is to describe actual terrain, we have to divide our region into areas of different intensities.  Your task here is to make a picture of a region with at least three different distinct subregions.  State clearly what $\\Lambda$ is in each region, then simulate Poisson processes and populate each region with trees.  You don't have to thin the regions as in part **C**, but you can if you wish.\n",
    "\n",
    "Your region should satisy the following properties:\n",
    "- You must have at least 3 sub-regions with non-zero $\\Lambda$.  $\\Lambda$ should vary by enough that we observe a visible difference between regions.\n",
    "- At least one region sub-division boundary should *not* be a straight vertical or horizontal line.  Use at least one sloped line or non-linear boundary.\n",
    "- Hint: It is recommended that you can easily compute the *areas* of subregions of your plot, since you'll need them for the rate of that region's Poisson distribution $\\lambda=A \\Lambda$.\n",
    "\n",
    "You will receive an extra 2 points if you *create your own region*, but if you do not wish to construct you own you may create simulations to fill in the plot below with trees."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f86b28a4d60>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Zach's picture, but without trees yet!  Add them or make your own and populate it.\n",
    "\n",
    "#region 1: treeless pond; #region 2: forest above lake; given by same function\n",
    "pond= lambda x: np.sqrt(1/4-x**2)\n",
    "\n",
    "#region 3: low density; #region 4: high density\n",
    "houses= lambda x: 1/2+np.sin(x*np.pi*4)/12\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(6,6));\n",
    "ax.set_xlim(0,1)\n",
    "ax.set_ylim(0,1)\n",
    "\n",
    "xgrd=np.linspace(0,1/2,100)\n",
    "plt.vlines(.5, ymin=0, ymax=1)\n",
    "plt.plot(xgrd, pond(xgrd)) #plot lake\n",
    "plt.text(.1,.2, 'Lake, $\\Lambda$=0') #label pond\n",
    "ax.fill_between(xgrd, 0, pond(xgrd), color='blue', alpha=.3) # fill lake\n",
    "\n",
    "plt.text(.1,.8, 'Light woodland, $\\Lambda$=55')\n",
    "ax.fill_between(xgrd, 1, pond(xgrd), color='green', alpha=.08) # fill woodland\n",
    "\n",
    "xgrd2=np.linspace(1/2,1,100)\n",
    "plt.text(.55,.8, 'Ugly housing division, $\\Lambda$=12')\n",
    "ax.fill_between(xgrd2, 1, houses(xgrd2), color='red', alpha=.3) # fill right side housing area\n",
    "\n",
    "plt.text(.55,.2, 'Nice forest, $\\Lambda$=150')\n",
    "ax.fill_between(xgrd2, 0, houses(xgrd2), color='green', alpha=.5); # fill right side woodland\n",
    "\n",
    "#lake is a quarter circle, radius .5\n",
    "lakearea = (math.pi * .5**2) * 0.25\n",
    "leftarea = 0.5\n",
    "lightwood = leftarea - lakearea\n",
    "\n",
    "lightwoodLam = 55*lightwood\n",
    "\n",
    "\n",
    "numbPoints = stats.poisson(lightwoodLam).rvs()#Poisson number of points\n",
    "xgrdtest=np.linspace(0,1/2,numbPoints)\n",
    "xx = stats.uniform.rvs(0,0.5,((numbPoints,1)))#x coordinates of Poisson points\n",
    "yy = stats.uniform.rvs(pond(xgrdtest), 1,((1,numbPoints)))#y coordinates of Poisson points\n",
    "#Plotting\n",
    "ax.scatter(xx,yy, edgecolor='g', facecolor='none', alpha=0.5 )\n",
    "\n",
    "nicelam = 150*0.25\n",
    "numbPoints2 = stats.poisson(nicelam).rvs()#Poisson number of points\n",
    "xgrdtest2=np.linspace(0.5,1,numbPoints2)\n",
    "xx2 = stats.uniform.rvs(0.5,1,((numbPoints2,1)))#x coordinates of Poisson points\n",
    "yy2 = stats.uniform.rvs(0,houses(xgrdtest2),((1,numbPoints2)))#y coordinates of Poisson points\n",
    "ax.scatter(xx2,yy2, edgecolor='w', facecolor='none', alpha=0.5 )\n",
    "\n",
    "uglylam = 12*0.25\n",
    "numbPoints3 = stats.poisson(uglylam).rvs()#Poisson number of points\n",
    "xgrdtest3=np.linspace(0.5,1,numbPoints3)\n",
    "xx3 = stats.uniform.rvs(0.5,1,((numbPoints3,1)))#x coordinates of Poisson points\n",
    "yy3 = stats.uniform.rvs(houses(xgrdtest3),1,((1,numbPoints3)))#y coordinates of Poisson points\n",
    "ax.scatter(xx3,yy3, edgecolor='r', facecolor='none', alpha=0.5 )\n",
    "\n",
    "#labels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Part E **: Print out the areas of each of your regions in part **D**, their intensities, and their *expected* numbers of trees.  How does this compare with the exact numbers of trees generated by your simulations?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The area of the Lake is 0.1963 square acres\n",
      "Its intensity is 0 and we expect to see 0 trees in this region\n",
      "In this instance, our simulation generated 0 trees in this area\n",
      "\n",
      "\n",
      "The area of the Light Woodland is 0.3037 square acres\n",
      "Its intensity is 55, and we expect to see ~17 trees in this region\n",
      "In this instance, our simulation generated 16 trees in this area\n",
      "\n",
      "\n",
      "The area of the Nice Forest is 0.25 square acres\n",
      "Its intensity is 150, and we expect to see ~38 trees in this region\n",
      "In this instance, our simulation generated 41 trees in this area\n",
      "\n",
      "\n",
      "The area of the Nice Forest is 0.25 square acres\n",
      "Its intensity is 12 and we expect to see ~3 trees in this region\n",
      "In this instance, our simulation generated 4 trees in this area\n"
     ]
    }
   ],
   "source": [
    "print (\"The area of the Lake is \" + str(round(lakearea,4)) + \" square acres\")\n",
    "print (\"Its intensity is 0 and we expect to see 0 trees in this region\")\n",
    "print (\"In this instance, our simulation generated 0 trees in this area\" )\n",
    "print (\"\\n\")      \n",
    "print (\"The area of the Light Woodland is \" + str(round(lightwood,4)) + \" square acres\")\n",
    "print (\"Its intensity is 55, and we expect to see ~17 trees in this region\")\n",
    "print (\"In this instance, our simulation generated \" + str(numbPoints) + \" trees in this area\")      \n",
    "print (\"\\n\")      \n",
    "print (\"The area of the Nice Forest is 0.25 square acres\")\n",
    "print (\"Its intensity is 150, and we expect to see ~38 trees in this region\")\n",
    "print (\"In this instance, our simulation generated \" + str(numbPoints2) + \" trees in this area\")\n",
    "print (\"\\n\")   \n",
    "print (\"The area of the Nice Forest is 0.25 square acres\")\n",
    "print (\"Its intensity is 12 and we expect to see ~3 trees in this region\")\n",
    "print (\"In this instance, our simulation generated \" + str(numbPoints3) + \" trees in this area\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "---\n",
    "[Back to top](#top)\n",
    "<a id='p2'></a>\n",
    "\n",
    "## [60 points] Problem 2: An Intro to Computational Epidemiology"
   ]
  },
  {
   "attachments": {
    "SIR_Edges.png": {
     "image/png": ""
    },
    "SIR_Removal.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Model\n",
    "\n",
    "In this problem we introduce and begin to explore some of the baseline tools of computational epidemiology: the SIR and SI models.  \n",
    "\n",
    "These models exist on graphs, where vertices or nodes represent people, agents, or surfaces that might carry a communicable disease.  Edges connecting nodes represent nodes that are in close contact with one another, and at risk of exchanging the disease.  \n",
    "\n",
    "\n",
    "We will implement a variant of the SIR model.  In this model, each vertex has one of three possible states:\n",
    " - **I** for Infected, and at risk of passing the disease to neighboring susceptible vertices.\n",
    " - **S** for Susceptible, and at risk of becoming infected by its neighbors\n",
    " - **R** for removed, and no longer at risk of contracting or spreading the infection.\n",
    "\n",
    "The model evolves *iteratively*, where for each discrete time step (one unit of `time`) the following two calculations occur:\n",
    "\n",
    "** Step 1:** First, consider all **edges** that connect an infected person to a susceptible person.  The susceptible vertex becomes infected with independent and identical probability $\\beta$ *for each* edge that that connects them to an infected vertex.  This is depicted below in the SIR_Edges.png image.\n",
    "\n",
    "![SIR_Edges.png](attachment:SIR_Edges.png)\n",
    "\n",
    "A susceptible edge can only be infected once, and is only at risk of being infected by nodes that were infected (**I**) at the *start* of each iteration: newly infected nodes don't pass the infection onwards until the next time step.\n",
    "\n",
    "** Step 2: ** Next, consider all infected (**I**) **vertices** that were infected at the *start* of the time step - prior to step 1 - and consider them recovered **R** with probability $\\gamma$.  This is depicted below in the SIR_Removal.png image.\n",
    "\n",
    "![SIR_Removal.png](attachment:SIR_Removal.png)\n",
    "\n",
    "Think of this process as the probability of becoming well: not only are those ndoes no longer contagious, they also have developed antibodies that make them immune to re-infection!\n",
    "\n",
    "The model can run for any number of time steps, but for reasonably small graphs we might expect to see the number of infections taper off to zero after a while.  If you watched any news coverage during the onset of COVID-19, one of the main tasks in predicting a pandemic is predicting the *basic reproduction number* $R_0= \\frac{\\beta}{\\gamma}$ of the disease.  Since $\\beta$ represents a rate of spread and $\\gamma$ represents a rate of recovery, the ratio is important in determining whether a disease spreads faster than recovery can occur."
   ]
  },
  {
   "attachments": {
    "SIR_Warmup1.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Warmups\n",
    "\n",
    "A couple of quick questions to make sure we're understanding the model and the roles of $\\beta$ and $\\gamma$.\n",
    "\n",
    "Feel free to use office hours/piazza to ask more pointed questions about the Warmups **only** to make sure you understand the basics of the transition model before you approach the implementation section later.\n",
    "\n",
    "**Part A**\n",
    "\n",
    "Suppose we have the small system depicted at time $t=0$ below, in SIR_Warmup1.png.\n",
    "\n",
    "![SIR_Warmup1.png](attachment:SIR_Warmup1.png)\n",
    "\n",
    "What is the exact probability that the last node on the right is an infected node **I** after exactly 3 time steps?  What is the exact probability that the leftmost node is still infected at this time?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Solution to Part A**:\n",
    "\n",
    "Probability of infection (last node on right) = b**3\n",
    "\n",
    "Probability of leftmost still being infected = (1 - l)**3\n"
   ]
  },
  {
   "attachments": {
    "SIR_Warmup2.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part B**\n",
    "\n",
    "Suppose we consider the alternative 4-vertex graph depicted below, in SIR_Warmup2.png.\n",
    "\n",
    "![SIR_Warmup2.png](attachment:SIR_Warmup2.png)\n",
    "\n",
    "What is the exact probability that we transition from the graph on the top to the exact graph on the bottom in a single time step?  Note that the \"center\" **S** node with two infected neighbors should be more likely to end up infected than rightmost node."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Solution to Part B**: \n",
    "\n",
    "Chance of left I recovering = L\n",
    "\n",
    "Chance of middle S infection = 2B\n",
    "\n",
    "Chance of right S infection = B\n",
    "\n",
    "Chance of bottom I recovering = L\n",
    "\n",
    "This is basically a big AND so L * L * B * 2B\n",
    "\n",
    "Chance of all = (L^2) * (2B^2)"
   ]
  },
  {
   "attachments": {
    "SIR_Graph.PNG": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Coding The Model\n",
    "\n",
    "Enough with the exact pen-and-paper solutions!  Let's run this model.  Suppose we wish to implement the SIR model on the graph below (SIR_graph.png):\n",
    "\n",
    "![SIR_Graph.PNG](attachment:SIR_Graph.PNG)\n",
    "\n",
    "For your convenience, the two most common ways to represent this are listed below.  `edges` contains a list of each of the edges of the graph, and `neighbors` is a dictionary that contains the neighbors of each node (as a list of connected nodes).\n",
    "\n",
    "`nodes` holds the 21 vertices, labelled by their indexes 0 through 20.\n",
    "`neighbors` is a dictionary, where e.g. `neighbors[1]` holds the list of neighboring vertices to vertex #1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Node #  0  has neighbors of  [1, 2, 3]\n",
      "Node #  1  has neighbors of  [0, 2, 3, 16]\n",
      "Node #  2  has neighbors of  [0, 1, 3, 14]\n",
      "Node #  3  has neighbors of  [0, 1, 2, 5]\n",
      "Node #  4  has neighbors of  [5, 6, 10]\n",
      "Node #  5  has neighbors of  [4, 6, 3, 7]\n",
      "Node #  6  has neighbors of  [4, 5, 7]\n",
      "Node #  7  has neighbors of  [8, 9, 10, 5, 6, 13, 14]\n",
      "Node #  8  has neighbors of  [7, 9, 10]\n",
      "Node #  9  has neighbors of  [7, 8, 10]\n",
      "Node #  10  has neighbors of  [7, 8, 9, 4, 13]\n",
      "Node #  11  has neighbors of  [12, 13, 14, 15, 16]\n",
      "Node #  12  has neighbors of  [11, 13]\n",
      "Node #  13  has neighbors of  [11, 12, 14, 10, 7, 15]\n",
      "Node #  14  has neighbors of  [11, 13, 15, 2, 7]\n",
      "Node #  15  has neighbors of  [11, 14, 13]\n",
      "Node #  16  has neighbors of  [17, 18, 19, 1, 11]\n",
      "Node #  17  has neighbors of  [16, 19, 18]\n",
      "Node #  18  has neighbors of  [16, 19, 17, 20]\n",
      "Node #  19  has neighbors of  [16, 17, 18]\n",
      "Node #  20  has neighbors of  [18]\n"
     ]
    }
   ],
   "source": [
    "#manual edge assignments\n",
    "edges=[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],\\\n",
    "      [4,5],[4,6],[5,6],\\\n",
    "      [7,8],[7,9],[7,10],[8,9],[8,10],[9,10],\\\n",
    "      [11,12],[11,13],[11,14],[11,15],[12,13],[13,14],[14,15],\\\n",
    "      [16,17],[16,18],[16,19],[17,19],[18,19],[17,18],\\\n",
    "      [1,16],[2,14],[3,5],[5,7],[6,7],[4,10],[10,13],[7,13],[7,14],[13,15],[11,16],[18,20]]\n",
    "#create a dictionary as option\n",
    "nodes = list(range(21))\n",
    "neighbors={key: [] for key in range(len(nodes))} \n",
    "for edge in edges:\n",
    "    neighbors[edge[0]].append(edge[1])\n",
    "    neighbors[edge[1]].append(edge[0])\n",
    "    \n",
    "#other useful variables\n",
    "nodes = list(range(21))\n",
    "N = len(nodes)\n",
    "#Dictionary usage:\n",
    "for node in neighbors:\n",
    "    print('Node # ',node, ' has neighbors of ', neighbors[node])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part C:**\n",
    "\n",
    "Implement a function **SIR_step(states, gamma, beta)** that takes one step of the SIR model with a known $\\beta$ and $\\gamma$ on the graph given above.\n",
    "\n",
    "* **initial_state** should be a list/numpy array of length 21 of the state of each vertex, e.g. ['S','S','I','I','R','S',...,'I'].\n",
    "* **gamma** is the constant determining recovery rate.\n",
    "* **beta** is the constant determining transmission rate.\n",
    "\n",
    "The return of the function should be the new states for each vertex, in the same format as **initial_state**.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def SIR_step(initial_state, gamma, beta):\n",
    "    \n",
    "    print (\"Input: \" + str(initial_state))\n",
    "    print (\"\\n\")\n",
    "    #Your code here\n",
    "    for i in range (N):\n",
    "        \n",
    "        type = initial_state[i]\n",
    "        if type == \"S\":\n",
    "            \n",
    "            neighs = neighbors[i]\n",
    "                \n",
    "            chances = 0\n",
    "            for k in range(len(neighs)):\n",
    "                spot = neighs[k]\n",
    "                if initial_state[spot] == \"I\":\n",
    "                    chances = chances + 1\n",
    "            \n",
    "            #chances of infection\n",
    "            realrate = chances * beta\n",
    "            \n",
    "            #determine if S turns to I\n",
    "            if random.random() <= realrate:\n",
    "                #if so, turn S to I\n",
    "                initial_state[i] = \"I\"\n",
    "                         \n",
    "            \n",
    "        if type == \"I\":\n",
    "            \n",
    "            #determine if I turns to S\n",
    "            if random.random() <= gamma:\n",
    "                initial_state[i] = \"R\"\n",
    "    \n",
    "    print (\"Output: \" + str(initial_state))\n",
    "    print (\"\\n\")\n",
    "    return(initial_state)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run a couple of quick sanity checks and self-checks below:\n",
    " - what should happen if `states` contains no **I** nodes?\n",
    " - what should happen if `states` contains **I** nodes but $\\beta=0$?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No I nodes\n",
      "Input: ['S', 'S', 'S', 'S', 'R', 'S', 'S', 'S', 'S', 'S', 'S', 'S', 'R', 'R', 'R', 'S', 'S', 'S', 'S', 'S', 'R', 'S']\n",
      "\n",
      "\n",
      "Output: ['S', 'S', 'S', 'S', 'R', 'S', 'S', 'S', 'S', 'S', 'S', 'S', 'R', 'R', 'R', 'S', 'S', 'S', 'S', 'S', 'R', 'S']\n",
      "\n",
      "\n",
      "Beta = 0\n",
      "Input: ['S', 'I', 'S', 'S', 'I', 'I', 'S', 'I', 'S', 'I', 'S', 'S', 'I', 'I', 'I', 'I', 'S', 'S', 'S', 'I', 'R', 'S']\n",
      "\n",
      "\n",
      "Output: ['S', 'I', 'S', 'S', 'I', 'I', 'S', 'I', 'S', 'I', 'S', 'S', 'I', 'I', 'I', 'I', 'S', 'S', 'S', 'I', 'R', 'S']\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['S',\n",
       " 'I',\n",
       " 'S',\n",
       " 'S',\n",
       " 'I',\n",
       " 'I',\n",
       " 'S',\n",
       " 'I',\n",
       " 'S',\n",
       " 'I',\n",
       " 'S',\n",
       " 'S',\n",
       " 'I',\n",
       " 'I',\n",
       " 'I',\n",
       " 'I',\n",
       " 'S',\n",
       " 'S',\n",
       " 'S',\n",
       " 'I',\n",
       " 'R',\n",
       " 'S']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check your code is working for those trivial cases:\n",
    "intstate = [\"S\",\"S\",\"S\",\"S\",\"R\",\"S\",\"S\",\"S\",\"S\",\"S\",\"S\",\"S\",\"R\",\"R\",\"R\",\"S\",\"S\",\"S\",\"S\",\"S\",\"R\",\"S\"]\n",
    "print (\"No I nodes\")\n",
    "SIR_step(intstate,0.1,0.1)\n",
    "\n",
    "intstate = [\"S\",\"I\",\"S\",\"S\",\"I\",\"I\",\"S\",\"I\",\"S\",\"I\",\"S\",\"S\",\"I\",\"I\",\"I\",\"I\",\"S\",\"S\",\"S\",\"I\",\"R\",\"S\"]\n",
    "print (\"Beta = 0\")\n",
    "SIR_step(intstate,0.1,0.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part D:**\n",
    "\n",
    "Time to run the model for an initial set of states and describe what happens!  Suppose the initial states of each of the nodes is such that nodes 7, 13, and 18 are infected and the rest are susceptible.  Code for this is given below.\n",
    "\n",
    "Now we want to create a function or a loop that runs **SIR_step** for 500 time steps.  \n",
    "\n",
    "At the end of 500 steps, we will return only a tuple of two integers.  First, the total number of nodes that were infected over the course of the epidemic; and second, and the total days spent infected across all nodes.  These are two good measures of the severity of the epidemic!  When we take 500 steps, this represents *one* example of what could happen when an infection is set loose in a small (compartmental) environment.  As data scientists, we need to run this 500-step experiment multiple times to understand the overall descriptors of our simulated pandemic!\n",
    "\n",
    "Implement a function **SIR_sim(intial_state, gamma, beta, n_steps)** that takes *many* step of the SIR model with a known $\\beta$ and $\\gamma$ on the graph given above.  It should return the tuple of **(days_lost,people_infected)**\n",
    "\n",
    "* **initial_state** should be a list/numpy array of length 21 of the state of each vertex, e.g. ['S','S','I','I','R','S',...,'I'].\n",
    "* **gamma** is the constant determining recovery rate.\n",
    "* **beta** is the constant determining transmission rate.\n",
    "* **n_steps** is the number of steps.  It can be defaulted as 500.\n",
    "* The return **days_lost** is the number of cumulative days all people were infected.  After each call to **SIR_step**, you should increment this amount by the number of `I` entries in your state vector.\n",
    "* The return **people_infected** is the number of people that were infected into state `I` at any point in the simulation.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def SIR_sim(gamma, beta, initial_state, n_steps=100):\n",
    "    #do the thing!\n",
    "    \n",
    "    people_infected = 0\n",
    "    days_lost = 0\n",
    "    for j in range (n_steps):\n",
    "        #plug above code\n",
    "        \n",
    "        for i in range (len(initial_state)):\n",
    "        \n",
    "            type = initial_state[i]\n",
    "            if type == \"S\":\n",
    "\n",
    "                neighs = neighbors[i]\n",
    "\n",
    "                chances = 0\n",
    "                for k in range(len(neighs)):\n",
    "                    spot = neighs[k]\n",
    "                    if initial_state[spot] == \"I\":\n",
    "                        chances = chances + 1\n",
    "\n",
    "                #chances of infection\n",
    "                realrate = chances * beta\n",
    "\n",
    "                #determine if S turns to I\n",
    "                if random.random() <= realrate:\n",
    "                    #if so, turn S to I\n",
    "                    initial_state[i] = \"I\"\n",
    "                    people_infected = people_infected + 1\n",
    "\n",
    "\n",
    "            if type == \"I\":\n",
    "\n",
    "                #determine if I turns to S\n",
    "                if random.random() <= gamma:\n",
    "                    initial_state[i] = \"R\"\n",
    "\n",
    "\n",
    "            #at the end of each day, check how many are infected and add to toal\n",
    "        \n",
    "            for h in range(len(initial_state)):\n",
    "                if initial_state[h] == \"I\":\n",
    "                    days_lost = days_lost + 1\n",
    "        \n",
    "    \n",
    "    \n",
    "    return days_lost, people_infected\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part E:**\n",
    "\n",
    "Run your function in part D 100 times (so you'll have 100 instances of 500 time steps) *each* for 3 different sets of values of the constants $\\gamma$ and $\\beta$.  The three sets of conditions we should run experiments under are:\n",
    "\n",
    "* First, when the values of $\\gamma$ and $\\beta$ are each 0.05.\n",
    "* Second, when $\\beta=0.04$ and $\\gamma=0.06$.\n",
    "* Finally, when $\\beta=0.06$ and $\\gamma=0.04$.\n",
    "\n",
    "For each one of those 3 sets of experiments, report the average number of people infected and average number of days lost to infection."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Equal Rates\n",
      "\n",
      "\n",
      "Average Infected People = 12.78\n",
      "Average Days Lost = 6743.35\n",
      "\n",
      "\n",
      "High Recover\n",
      "\n",
      "\n",
      "Average Infected People = 9.71\n",
      "Average Days Lost = 4397.23\n",
      "\n",
      "\n",
      "High Infect\n",
      "\n",
      "\n",
      "Average Infected People = 14.97\n",
      "Average Days Lost = 9016.39\n"
     ]
    }
   ],
   "source": [
    "#recommended output style:\n",
    "# print('For beta=',beta,' and gamma=',gamma,' lost', days_lost  ,' days between ', people_infected, ' people')\n",
    "\n",
    "#given initialization; 'states' has 18 'S' nodes and 3 'I' nodes\n",
    "states=np.array(['S']*21)\n",
    "infected_states=[7,12,18]\n",
    "for idx in infected_states:\n",
    "    states[idx]='I'\n",
    "\n",
    "\n",
    "equalavinfect = []\n",
    "equaldaysinfect = []\n",
    "print (\"\\n\")\n",
    "print (\"Equal Rates\")\n",
    "print (\"\\n\")\n",
    "for m in range (100): \n",
    "    \n",
    "    thisrun = SIR_sim(0.05, 0.05, states, n_steps=500)\n",
    "    equalavinfect.append(thisrun[1])\n",
    "    equaldaysinfect.append(thisrun[0])\n",
    "    \n",
    "    states=np.array(['S']*21)\n",
    "    infected_states=[7,12,18]\n",
    "    for idx in infected_states:\n",
    "        states[idx]='I'\n",
    "\n",
    "totalinfect = 0\n",
    "\n",
    "for w in range (len(equalavinfect)):\n",
    "    totalinfect = totalinfect + equalavinfect[w]\n",
    "        \n",
    "totalinfect = totalinfect / len(equalavinfect)\n",
    "\n",
    "totaldays = 0\n",
    "\n",
    "for x in range (len(equaldaysinfect)):\n",
    "    totaldays = totaldays + equaldaysinfect[x]\n",
    "        \n",
    "totaldays = totaldays / len(equaldaysinfect)\n",
    "\n",
    "print (\"Average Infected People = \" + str(totalinfect))\n",
    "print (\"Average Days Lost = \" + str(totaldays))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "twoavinfect = []\n",
    "twodaysinfect = []\n",
    "print (\"\\n\")\n",
    "print (\"High Recover\")\n",
    "print (\"\\n\")\n",
    "for m in range (100): \n",
    "    \n",
    "    thisrun2 = SIR_sim(0.06, 0.04, states, n_steps=500)\n",
    "    twoavinfect.append(thisrun2[1])\n",
    "    twodaysinfect.append(thisrun2[0])\n",
    "    \n",
    "    states=np.array(['S']*21)\n",
    "    infected_states=[7,12,18]\n",
    "    for idx in infected_states:\n",
    "        states[idx]='I'\n",
    "    \n",
    "#find average of both rates\n",
    "\n",
    "\n",
    "twototalinfect = 0\n",
    "\n",
    "for h in range (len(twoavinfect)):\n",
    "    twototalinfect = twototalinfect + twoavinfect[h]\n",
    "        \n",
    "twototalinfect = twototalinfect / len(twoavinfect)\n",
    "\n",
    "twototaldays = 0\n",
    "\n",
    "for y in range (len(twodaysinfect)):\n",
    "    twototaldays = twototaldays + twodaysinfect[y]\n",
    " \n",
    "    \n",
    "twototaldays = twototaldays / len(twodaysinfect)\n",
    "\n",
    "print (\"Average Infected People = \" + str(twototalinfect))\n",
    "print (\"Average Days Lost = \" + str(twototaldays))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "threeavinfect = []\n",
    "threedaysinfect = []\n",
    "print (\"\\n\")\n",
    "print (\"High Infect\")\n",
    "print (\"\\n\")\n",
    "for m in range (100): \n",
    "\n",
    "    thisrun3 = SIR_sim(0.04, 0.06, states, n_steps=500)\n",
    "    threeavinfect.append(thisrun3[1])\n",
    "    threedaysinfect.append(thisrun3[0])\n",
    "    \n",
    "    states=np.array(['S']*21)\n",
    "    infected_states=[7,12,18]\n",
    "    for idx in infected_states:\n",
    "        states[idx]='I'\n",
    "    \n",
    "#find average of both rates\n",
    "\n",
    "\n",
    "threetotalinfect = 0\n",
    "\n",
    "for w in range (len(threeavinfect)):\n",
    "    threetotalinfect = threetotalinfect + threeavinfect[w]\n",
    "        \n",
    "threetotalinfect = threetotalinfect / len(threeavinfect)\n",
    "\n",
    "threetotaldays = 0\n",
    "\n",
    "for x in range (len(threedaysinfect)):\n",
    "    threetotaldays = threetotaldays + threedaysinfect[x]\n",
    "\n",
    "threetotaldays = threetotaldays / len(threedaysinfect)\n",
    "\n",
    "\n",
    "print (\"Average Infected People = \" + str(threetotalinfect))\n",
    "print (\"Average Days Lost = \" + str(threetotaldays))\n",
    "        \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Part F: **\n",
    "\n",
    "You should have observed that $\\beta=0.06$ and $\\gamma=0.04$ was the \"more dangerous\" variant of the infection, with an $$R_0=\\frac{\\beta}{\\gamma}$$ of 1.5.  We're going to explore the concept of *social distancing*, which public health authorities suggest includes attempting to limit cross-household exposure to contagion.  Scroll up and take a look at the manual edge assignments code from part **B**: pay attention to the line breaks.  This synthetic data is meant to represent 5 close-knit units/families: [0-3], [4-6],[7-10],[11-15],[16-19] and then a collection of edges between those units in the last line.  The goal of social distancing is to remove as many of the between-unit edges from the graph as possible.\n",
    "\n",
    "Suppose that under social distancing, each inter-family edge is removed (independentally) with probability .5.\n",
    "\n",
    "Recreate your code from parts **B**, **C**, **D**, and **E** and create a **SIR_sim_distanced** function to simulate 500 steps of an **SIR_step** function.  \n",
    "\n",
    "Implement a function **SIR_sim(intial_state, gamma, beta, n_steps)** that takes *many* step of the SIR model with a known $\\beta$ and $\\gamma$.  It should return the tuple of **(days_lost,people_infected)**\n",
    "\n",
    "* **initial_state** should be a list/numpy array of length 21 of the state of each vertex, e.g. ['S','S','I','I','R','S',...,'I'].\n",
    "* **gamma** is the constant determining recovery rate.\n",
    "* **beta** is the constant determining transmission rate.\n",
    "* **n_steps** is the number of steps.  It can be defaulted as 500.\n",
    "* The return **days_lost** is the number of cumulative days all people were infected.  After each call to **SIR_step**, you should increment this amount by the number of `I` entries in your state vector.\n",
    "* The return **people_infected** is the number of people that were infected into state `I` at any point in the simulation.\n",
    "* **Before** any **SIR_step** calls, evaluate each edge in the list of inter-family connections.  [[1,16],[2,14],[3,5],[5,7],[6,7],[4,10],[10,13],[7,13],[7,14],[13,15],[11,16],[18,20]] and *discard it* from the simulation with probability .5.  Use the resulting graph for your simulation.  Note that this may mean you need to input a graph $G$ into **SIR_step**, since each simulation may have different inter-unit edges removed.  Alternatively, you could redefine **SIR_step** inside your **SIR_sim** to account for the changes in the graph's edges.\n",
    "\n",
    "Report the resulting average number of people infected and average number of days lost to infection under the $\\beta=0.06$ and $\\gamma=0.04$ parameter values.  Did this amount of social distancing seem to work?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting Interfam\n",
      "[[1, 16], [2, 14], [3, 5], [5, 7], [6, 7], [4, 10], [10, 13], [7, 13], [7, 14], [13, 15], [11, 16], [18, 20]]\n",
      "\n",
      "\n",
      "To remove:\n",
      "[[1, 16], [2, 14], [3, 5], [7, 13], [7, 14], [13, 15]]\n",
      "\n",
      "\n",
      "Starting Edges\n",
      "[[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3], [4, 5], [4, 6], [5, 6], [7, 8], [7, 9], [7, 10], [8, 9], [8, 10], [9, 10], [11, 12], [11, 13], [11, 14], [11, 15], [12, 13], [13, 14], [14, 15], [16, 17], [16, 18], [16, 19], [17, 19], [18, 19], [17, 18]]\n",
      "\n",
      "\n",
      "After Deletion\n",
      "[[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3], [4, 5], [4, 6], [5, 6], [7, 8], [7, 9], [7, 10], [8, 9], [8, 10], [9, 10], [11, 12], [11, 13], [11, 14], [11, 15], [12, 13], [13, 14], [14, 15], [16, 17], [16, 18], [16, 19], [17, 19], [18, 19], [17, 18]]\n",
      "\n",
      "\n",
      "High Infection\n",
      "\n",
      "\n",
      "Average Infect = 7.35\n",
      "Average Days = 5714.98\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def SIR_sim_distanced(initial_state, gamma, beta, n_steps=500):\n",
    "    #do the thing!\n",
    "    \n",
    "    people_infected = 0\n",
    "    days_lost = 0\n",
    "    for j in range (n_steps):\n",
    "        #plug above code\n",
    "        \n",
    "        for i in range (len(initial_state)):\n",
    "        \n",
    "            type = initial_state[i]\n",
    "            if type == \"S\":\n",
    "\n",
    "                neighs = neighbors[i]\n",
    "\n",
    "                chances = 0\n",
    "                for k in range(len(neighs)):\n",
    "                    spot = neighs[k]\n",
    "                    if initial_state[spot] == \"I\":\n",
    "                        chances = chances + 1\n",
    "\n",
    "                #chances of infection\n",
    "                realrate = chances * beta\n",
    "\n",
    "                #determine if S turns to I\n",
    "                if random.random() <= realrate:\n",
    "                    #if so, turn S to I\n",
    "                    initial_state[i] = \"I\"\n",
    "                    people_infected = people_infected + 1\n",
    "\n",
    "\n",
    "            if type == \"I\":\n",
    "\n",
    "                #determine if I turns to S\n",
    "                if random.random() <= gamma:\n",
    "                    initial_state[i] = \"R\"\n",
    "\n",
    "            #if type == \"R\":\n",
    "\n",
    "                #neighs = neighbors[i]\n",
    "\n",
    "                #for k in range(len(neighs)):\n",
    "                    #spot = neighs[k]\n",
    "                    #if initial_state[spot] == \"I\":\n",
    "                        #initial_state[i] = \"S\"\n",
    "\n",
    "\n",
    "            #at the end of each day, check how many are infected and add to toal\n",
    "            for w in range(len(initial_state)):\n",
    "                if initial_state[w] == \"I\":\n",
    "                    days_lost = days_lost + 1\n",
    "                    \n",
    "    return days_lost, people_infected\n",
    "\n",
    "\n",
    "#some setup for convenience\n",
    "fam_edges=[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],\\\n",
    "      [4,5],[4,6],[5,6],\\\n",
    "      [7,8],[7,9],[7,10],[8,9],[8,10],[9,10],\\\n",
    "      [11,12],[11,13],[11,14],[11,15],[12,13],[13,14],[14,15],\\\n",
    "      [16,17],[16,18],[16,19],[17,19],[18,19],[17,18]]\n",
    "interfam_edges=[[1,16],[2,14],[3,5],[5,7],[6,7],[4,10],[10,13],[7,13],[7,14],[13,15],[11,16],[18,20]]\n",
    "\n",
    "#now re-run things with less edges!\n",
    "distanced_interfam = []\n",
    "#find intra-family edges and potentially remove them\n",
    "\n",
    "print (\"Starting Interfam\")\n",
    "print (interfam_edges)\n",
    "print (\"\\n\")\n",
    "for i in range (len(interfam_edges)):\n",
    "    if random.random() < 0.5:\n",
    "        distanced_interfam.append(interfam_edges[i])\n",
    "        \n",
    "print (\"To remove:\")\n",
    "print (distanced_interfam)\n",
    "print (\"\\n\")\n",
    "        \n",
    "    #remove all remaining edges from regular edges\n",
    "print (\"Starting Edges\")\n",
    "print (fam_edges)\n",
    "print (\"\\n\")\n",
    "\n",
    "newfam_edges = []\n",
    "\n",
    "for i in range (len(fam_edges)):\n",
    "    match = False\n",
    "    for j in range (len(distanced_interfam)):\n",
    "                    \n",
    "        if distanced_interfam[j] == fam_edges[i]:\n",
    "            match = True\n",
    "                    \n",
    "    if match == False:\n",
    "        newfam_edges.append(fam_edges[i])\n",
    "\n",
    "print (\"After Deletion\")\n",
    "print (newfam_edges)\n",
    "\n",
    "        \n",
    "        \n",
    "#create a dictionary as option\n",
    "nodes = list(range(21))\n",
    "neighbors={key: [] for key in range(len(nodes))} \n",
    "for edge in newfam_edges:\n",
    "    neighbors[edge[0]].append(edge[1])\n",
    "    neighbors[edge[1]].append(edge[0])\n",
    "    \n",
    "#other useful variables\n",
    "nodes = list(range(21))\n",
    "N = len(nodes)        \n",
    "    \n",
    "thestates=np.array(['S']*21)\n",
    "infected_states=[7,12,18]\n",
    "for idx in infected_states:\n",
    "    thestates[idx]='I'\n",
    "       \n",
    "\n",
    "distavinfect = []\n",
    "distdaysinfect = []\n",
    "print (\"\\n\")\n",
    "print (\"High Infection\")\n",
    "print (\"\\n\")\n",
    "for m in range (100): \n",
    "    \n",
    "    thisrundist = SIR_sim_distanced(thestates, 0.04, 0.06, n_steps=500)\n",
    "    distavinfect.append(thisrundist[1])\n",
    "    distdaysinfect.append(thisrundist[0])\n",
    "    \n",
    "    thestates=np.array(['S']*21)\n",
    "    infected_states=[7,12,18]\n",
    "    for idx in infected_states:\n",
    "        thestates[idx]='I'\n",
    "           \n",
    "#find average of both rates\n",
    "\n",
    "disttotalinfect = 0\n",
    "\n",
    "for h in range (len(distavinfect)):\n",
    "    disttotalinfect = disttotalinfect + distavinfect[h]\n",
    "        \n",
    "disttotalinfect = disttotalinfect / len(distavinfect)\n",
    "\n",
    "disttotaldays = 0\n",
    "\n",
    "for y in range (len(distdaysinfect)):\n",
    "    disttotaldays = disttotaldays + distdaysinfect[y]\n",
    "\n",
    "    \n",
    "disttotaldays = disttotaldays / len(distdaysinfect)\n",
    "\n",
    "print (\"Average Infect = \" + str(disttotalinfect))\n",
    "print (\"Average Days = \" + str(disttotaldays))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part G: **\n",
    "\n",
    "Albeit not very unusual, this social distancing technique worked wonders, nearly halving the number of infections and lost days with the same input date of the highly infective set of probabilities. Pretty cool!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Computational epidemiology is a huge field, and models can add all kinds of added components: nodes could be surfaces *or* people, graphs could be representing cities or communities instead of individuals, etc.  One similar model is used instead for diseases that don't ever have **R** states: nodes just transition from **I** to **S** because there may be no long-term immunity after infection.\n",
    "\n",
    "If you're ever interested in learning more about computational epidemiology, CU-Boulder has a couple of world experts in network-based epidemology and computational public health.  Check out the CS department's course offerings by Aaron Clauset, Dan Larremore, and others for great opportunities to do these sorts of things in a more advanced setting.\n",
    "\n",
    "<br>\n",
    "\n",
    "---\n",
    "[Back to top](#top)\n",
    "<a id='bot'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Appendix: Graph plotting code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#here's the code to generate the given plot.  It is not needed for any of your tasks,\n",
    "#...but if you're interested in including some visualizations in your analysis in parts F/G you can\n",
    "#create the graph in networkx\n",
    "import networkx as nx\n",
    "\n",
    "G=nx.Graph()\n",
    "nodes=[i for i in range(21)]\n",
    "G.add_nodes_from(nodes)\n",
    "for i in range(len(edges)):\n",
    "    G.add_edge(edges[i][0],edges[i][1])\n",
    "\n",
    "#plot the graph\n",
    "np.random.seed(6) #graph plotting algorithm is random; this ensures same image each time\n",
    "pos = nx.spring_layout(G) #algorithm that tries to \"cluster\" node plot locations\n",
    "colors=[0,0,0,0,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,5] #manual \"family\" groupings\n",
    "labels=dict(zip(range(21),range(21))); #label 0-20\n",
    "nx.draw_networkx_nodes(G, pos, node_color=colors, cmap='Pastel1', node_size=500, alpha=.75); #node colors easy to see labels over\n",
    "nx.draw_networkx_edges(G, pos, width=1.0, alpha=0.8); #draw edges\n",
    "nx.draw_networkx_labels(G, pos, labels, font_size=16); #label vertices by index/number\n",
    "plt.axis(\"off\");\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#replace \"S\" with yellow, \"R\" with green, \"I\" with red for a quick \"who is at risk?\" type image.\n",
    "state_colors=['red' if x == 'I' else 'yellow' if x=='S' else 'green' for x in states]\n",
    "pos = nx.spring_layout(G) #algorithm that tries to \"cluster\" node plot locations\n",
    "\n",
    "nx.draw_networkx_nodes(G, pos, node_color=state_colors, node_size=500);\n",
    "nx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5);\n",
    "nx.draw_networkx_labels(G, pos, labels, font_size=16);\n",
    "plt.axis(\"off\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
